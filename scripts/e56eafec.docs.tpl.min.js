/**
 * angular-strap
 * @version v2.0.0-rc.3 - 2014-03-05
 * @link http://mgcrea.github.io/angular-strap
 * @author Olivier Louvignes (olivier@mg-crea.com)
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
angular.module("mgcrea.ngStrapDocs").run(["$templateCache",function(a){"use strict";a.put("affix/docs/affix.demo.html",'<div class="bs-docs-section">\n\n  <div class="page-header">\n    <h1 id="affix">Affix <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/affix/affix.js" target="_blank">affix.js</a>\n    </h1>\n    <code>mgcrea.ngStrap.affix</code>\n  </div>\n\n  <h2 id="affix-examples">Examples</h2>\n  <p>The subnavigation on the left is a live demo of the affix plugin.</p>\n\n  <div class="callout callout-warning">\n    <h4>Plugin dependency</h4>\n    <p>Affix require the <a href="//github.com/mgcrea/angular-strap/blob/master/src/helpers/dimensions.js" target="_blank">helpers.dimensions</a> module to be loaded.</p>\n  </div>\n\n  <div class="highlight">\n    <pre>\n      <code class="html" highlight-block>\n        &lt;div class="bs-sidebar hidden-print" role="complementary" data-offset-top="-80" bs-affix&gt;&lt;/div&gt;\n      </code>\n    </pre>\n  </div>\n\n  <h2 id="affix-usage">Usage</h2>\n  <p>Append a <code>bs-affix</code>attribute to any element to enable the plugin.</p>\n  <p>You can affix inside a custom container with the <code>bs-affix-target</code> attribute added to any parent element.</p>\n  <div class="callout callout-info">\n    <h4>The module also exposes an <code>$affix</code>service</h4>\n    <p>Available for programmatic use (mainly inside a directive as it requires an element).</p>\n    <div class="highlight">\n      <pre>\n        <code class="javascript" highlight-block>\n          var affix = $affix(element, options);\n        </code>\n      </pre>\n    </div>\n  </div>\n\n\n  <h3>Options</h3>\n  <p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p>\n  <div class="table-responsive">\n    <table class="table table-bordered table-striped">\n      <thead>\n        <tr>\n          <th style="width: 100px;">Name</th>\n          <th style="width: 50px;">type</th>\n          <th style="width: 50px;">default</th>\n          <th>description</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>offsetTop</td>\n          <td>number</td>\n          <td>0</td>\n          <td>Pixels to offset from top of screen when calculating position of scroll.</td>\n        </tr>\n        <tr>\n          <td>offsetBottom</td>\n          <td>number</td>\n          <td>0</td>\n          <td>Pixels to offset from bottom of screen when calculating position of scroll.</td>\n        </tr>\n        <tr>\n          <td>offsetParent</td>\n          <td>number</td>\n          <td>0</td>\n          <td>Pixels to offset from parent when calculating position of scroll.</td>\n        </tr>\n        <tr>\n          <td>offsetUnpin</td>\n          <td>number</td>\n          <td>0</td>\n          <td>Pixels to offset from unpin position when calculating position of scroll.</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  <div class="callout callout-info">\n    <h4>Default options</h4>\n    <p>You can override global defaults for the plugin with <code>$affixProvider.defaults</code></p>\n    <div class="highlight">\n      <pre class="bs-exemple-code">\n        <code class="javascript" highlight-block>\n          angular.module(\'myApp\')\n          .config(function($affixProvider) {\n            angular.extend($affixProvider.defaults, {\n              animation: \'am-fade-and-slide-top\',\n              placement: \'top\'\n            });\n          })\n        </code>\n      </pre>\n    </div>\n  </div>\n\n</div>\n'),a.put("alert/docs/alert.demo.html",'<div class="bs-docs-section" ng-controller="AlertDemoCtrl">\n\n  <div class="page-header">\n    <h1 id="alerts">Alerts <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/alert/alert.js" target="_blank">alert.js</a>\n    </h1>\n    <code>mgcrea.ngStrap.alert</code>\n  </div>\n\n\n  <h2 id="alerts-examples">Examples</h2>\n  <p>Alerts are styled tiny dialogs that inherit the behavior of modals.</p>\n\n  <div class="callout callout-danger">\n    <h4>Plugin dependency</h4>\n    <p>Alerts require the <a href="#modals">modal plugin</a> to be included.</p>\n  </div>\n\n  <h3>Live demo <a class="small edit-plunkr" data-module-name="mgcrea.ngStrapDocs" data-content-html-url="alert/docs/alert.demo.html" data-content-js-url="alert/docs/alert.demo.js" ng-plunkr data-title="edit in plunker" data-placement="right" bs-tooltip>clog.info</a></h3>\n  <pre class="bs-example-scope">$scope.alert = {{alert | json}};</pre>\n  <div class="bs-example" style="padding-bottom: 24px;" append-source>\n\n    <!-- Button to trigger a default alert with a scope as an object {title:\'\', content:\'\', etc.} -->\n    <button type="button" class="btn btn-lg btn-primary" data-placement="top-right" data-container="body" data-duration="3" bs-alert="alert">Click to toggle alert\n      <br />\n      <small>(using an object)</small>\n    </button>\n\n    <!-- You can also use data-attrs to assign scope variables -->\n    <button type="button" class="btn btn-lg btn-primary" title="{{alert.title}}" data-content="{{alert.content}}" data-type="success" data-container="#alerts-container" bs-alert>Click to toggle alert\n      <br />\n      <small>(using data-attrs)</small>\n    </button>\n\n    <!-- You can use a custom html template with the `data-template` attr -->\n    <button type="button" class="btn btn-lg btn-danger" data-template="alert/docs/alert.tpl.demo.html" data-placement="top" data-duration="3" data-animation="am-fadeAndSlideTop" data-container="body" data-keyboard="true" bs-alert="alert">Custom alert\n      <br />\n      <small>(using data-template)</small>\n    </button>\n\n    <!-- Element container to append the first alert -->\n    <hr>\n    <div id="alerts-container"></div>\n\n  </div>\n\n\n  <h2 id="alerts-usage">Usage</h2>\n  <p>Append a <code>bs-alert</code>attribute to any element to enable the plugin.</p>\n  <div class="callout callout-info">\n    <h4>The module also exposes an <code>$alert</code>service</h4>\n    <p>Available for programmatic use (inside a controller/directive).</p>\n    <div class="highlight">\n      <pre>\n        <code class="javascript" highlight-block>\n          angular.module(\'myApp\')\n          .controller(\'DemoCtrl\', function($scope, $alert) {\n            var myAlert = $alert({title: \'Holy guacamole!\', content: \'Best check yo self, you\\\'re not looking too good.\', placement: \'top\', type: \'info\', show: true});\n          })\n        </code>\n      </pre>\n    </div>\n  </div>\n\n  <h3>Options</h3>\n  <p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p>\n  <p>For directives, you can naturally inherit the contextual <code>$scope</code> or leverage a custom one with an <a href="http://docs.angularjs.org/guide/expression">AngularJS expression</a> to evaluate as an object directly on the <code>bs-aside</code> attribute</p>\n  <div class="table-responsive">\n    <table class="table table-bordered table-striped">\n      <thead>\n        <tr>\n          <th style="width: 100px;">Name</th>\n          <th style="width: 50px;">type</th>\n          <th style="width: 50px;">default</th>\n          <th>description</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>animation</td>\n          <td>string</td>\n          <td>am-fade</td>\n          <td>apply a CSS animation powered by ngAnimate</td>\n        </tr>\n        <tr>\n          <td>placement</td>\n          <td>string</td>\n          <td>\'\'</td>\n          <td>how to position the alert - top | top-left | top-right <small>(requires custom CSS)</small>.</td>\n        </tr>\n        <tr>\n          <td>title</td>\n          <td>string</td>\n          <td>\'\'</td>\n          <td>default title value if <code>title</code>attribute isn\'t present</td>\n        </tr>\n        <tr>\n          <td>content</td>\n          <td>string</td>\n          <td>\'\'</td>\n          <td>default content value if <code>data-content</code>attribute isn\'t present</td>\n        </tr>\n        <tr>\n          <td>type</td>\n          <td>string</td>\n          <td>\'info\'</td>\n          <td>default content value if <code>data-type</code>attribute isn\'t present</td>\n        </tr>\n        <tr>\n          <td>keyboard</td>\n          <td>boolean</td>\n          <td>true</td>\n          <td>Closes the alert when escape key is pressed</td>\n        </tr>\n        <tr>\n          <td>show</td>\n          <td>boolean</td>\n          <td>true</td>\n          <td>Shows the alert when initialized.</td>\n        </tr>\n        <tr>\n          <td>container</td>\n          <td>string | false</td>\n          <td>false</td>\n          <td>\n            <p>Appends the alert to a specific element. Example: <code>container: \'body\'</code>. This option is particularly useful in that it allows you to position the alert in the flow of the document near the triggering element -&nbsp;which will prevent the alert from floating away from the triggering element during a window resize.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>template</td>\n          <td>path</td>\n          <td>false</td>\n          <td>\n            <p>If provided, overrides the default template, can be either a remote URL or a cached template id.</p>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  <div class="callout callout-info">\n    <h4>Default options</h4>\n    <p>You can override global defaults for the plugin with <code>$alertProvider.defaults</code></p>\n    <div class="highlight">\n      <pre class="bs-exemple-code">\n        <code class="javascript" highlight-block>\n          angular.module(\'myApp\')\n          .config(function($alertProvider) {\n            angular.extend($alertProvider.defaults, {\n              animation: \'am-fade-and-slide-top\',\n              placement: \'top\'\n            });\n          })\n        </code>\n      </pre>\n    </div>\n  </div>\n\n\n  <h3>Scope methods</h3>\n  <p>Methods available inside the directive scope to toggle visibility.</p>\n\n  <h4>$show()</h4>\n  <p>Reveals the alert.</p>\n\n  <h4>$hide()</h4>\n  <p>Hides the alert.</p>\n\n  <h4>$toggle()</h4>\n  <p>Toggles the alert.</p>\n\n</div>\n'),a.put("alert/docs/alert.tpl.demo.html",'<div class="alert" tabindex="-1" ng-class="[type ? \'alert-\' + type : null]">\n  <button type="button" class="close" ng-click="$hide()">&times;</button>\n  <strong ng-bind="title"></strong>&nbsp;<span ng-bind-html="content"></span>\n</div>\n'),a.put("aside/docs/aside.demo.html",'<div class="bs-docs-section" ng-controller="AsideDemoCtrl">\n\n  <div class="page-header">\n    <h1 id="asides">Asides <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/aside/aside.js" target="_blank">aside.js</a>\n    </h1>\n    <code>mgcrea.ngStrap.aside</code>\n  </div>\n\n\n  <h2 id="asides-examples">Examples</h2>\n  <p>Asides are custom panels, drawers that inherit the behavior of modals.</p>\n\n  <div class="callout callout-danger">\n    <h4>Plugin dependency</h4>\n    <p>Asides require the <a href="#modals">modal plugin</a> to be included.</p>\n  </div>\n\n  <h3>Live demo <a class="small edit-plunkr" data-module-name="mgcrea.ngStrapDocs" data-content-html-url="aside/docs/aside.demo.html" data-content-js-url="aside/docs/aside.demo.js" ng-plunkr data-title="edit in plunker" data-placement="right" bs-tooltip></a></h3>\n  <pre class="bs-example-scope">$scope.aside = {{aside | json}};</pre>\n  <div class="bs-example" append-source>\n\n    <!-- Button to trigger a default aside with a scope as an object {title:\'\', content:\'\', etc.} -->\n    <button type="button" class="btn btn-lg btn-primary" bs-aside="aside">Click to toggle aside\n      <br />\n      <small>(using an object)</small>\n    </button>\n\n    <!-- You can use a custom html template with the `data-template` attr -->\n    <button type="button" class="btn btn-lg btn-danger" data-template="aside/docs/aside.tpl.demo.html" data-placement="left" data-animation="am-slide-left" bs-aside="aside" data-container="body">Custom aside\n      <br />\n      <small>(using data-template)</small>\n    </button>\n\n  </div>\n\n  <div class="callout callout-info">\n    <h4>Custom styles required</h4>\n    <p>Asides are not part of the Bootstrap\'s core, to use them you must use <code>bootstrap-additions.css</code> from the <a href="//github.com/mgcrea/bootstrap-additions" target="_blank">BootstrapAdditions</a> project. This project being not yet fully released, meanwhile, you can use the <a href="//mgcrea.github.io/angular-strap/static/styles/bootstrap-additions.min.css" target="_blank">development snapshot</a> compiled for theses docs.</p>\n  </div>\n\n  <h2 id="asides-usage">Usage</h2>\n  <p>Append a <code>bs-aside</code>attribute to any element to enable the plugin.</p>\n  <div class="callout callout-info">\n    <h4>The module also exposes an <code>$aside</code>service</h4>\n    <p>Available for programmatic use.</p>\n    <div class="highlight">\n      <pre>\n        <code class="javascript" highlight-block>\n          angular.module(\'myApp\')\n          .controller(\'DemoCtrl\', function($scope, $aside) {\n            // Show a basic aside from a controller\n            var myAside = $aside({title: \'My Title\', content: \'My Content\', show: true});\n\n            // Pre-fetch an external template populated with a custom scope\n            var myOtherAside = $aside({scope: $scope, template: \'aside/docs/aside.tpl.demo.html\'});\n            // Show when some event occurs (use $promise property to ensure the template has been loaded)\n            myOtherAside.$promise.then(function() {\n              myOtherAside.show();\n            })\n          })\n        </code>\n      </pre>\n    </div>\n  </div>\n\n  <h3>Options</h3>\n  <p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p>\n  <p>For directives, you can naturally inherit the contextual <code>$scope</code> or leverage a custom one with an <a href="http://docs.angularjs.org/guide/expression">AngularJS expression</a> to evaluate as an object directly on the <code>bs-aside</code> attribute</p>\n  <div class="table-responsive">\n    <table class="table table-bordered table-striped">\n      <thead>\n        <tr>\n          <th style="width: 100px;">Name</th>\n          <th style="width: 50px;">type</th>\n          <th style="width: 50px;">default</th>\n          <th>description</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>animation</td>\n          <td>string</td>\n          <td>am-fade-and-slide-right</td>\n          <td>apply a CSS animation powered by ngAnimate</td>\n        </tr>\n        <tr>\n          <td>placement</td>\n          <td>string</td>\n          <td>\'top\'</td>\n          <td>how to position the modal - top | bottom | center <small>(requires custom CSS)</small>.</td>\n        </tr>\n        <tr>\n          <td>title</td>\n          <td>string</td>\n          <td>\'\'</td>\n          <td>default title value if <code>title</code>attribute isn\'t present</td>\n        </tr>\n        <tr>\n          <td>content</td>\n          <td>string</td>\n          <td>\'\'</td>\n          <td>default content value if <code>data-content</code>attribute isn\'t present</td>\n        </tr>\n        <tr>\n          <td>html</td>\n          <td>boolean</td>\n          <td>false</td>\n          <td>replace <code>ng-bind</code> with <code>ng-bind-html</code>, requires <code>ngSanitize</code> to be loaded</td>\n        </tr>\n        <tr>\n          <td>backdrop</td>\n          <td>boolean or the string <code>\'static\'</code>\n          </td>\n          <td>true</td>\n          <td>Includes a modal-backdrop element. Alternatively, specify <code>static</code>for a backdrop which doesn\'t close the modal on click.</td>\n        </tr>\n        <tr>\n          <td>keyboard</td>\n          <td>boolean</td>\n          <td>true</td>\n          <td>Closes the modal when escape key is pressed</td>\n        </tr>\n        <tr>\n          <td>show</td>\n          <td>boolean</td>\n          <td>true</td>\n          <td>Shows the modal when initialized.</td>\n        </tr>\n        <tr>\n          <td>container</td>\n          <td>string | false</td>\n          <td>false</td>\n          <td>\n            <p>Appends the popover to a specific element. Example:\n <code>container: \'body\'</code>. This option is particularly useful in that it allows you to position the popover in the flow of the document near the triggering element -&nbsp;which will prevent the popover from floating away from the triggering element during a window resize.</p>\n          </td>\n        </tr>\n<tr>\n          <td>template</td>\n          <td>path</td>\n          <td>false</td>\n          <td>\n            <p>If provided, overrides the default template, can be either a remote URL or a cached template id.</p>\n            <p>It should be a <code>div.aside</code> element following Twitter Bootstrap styles conventions (<a href="//github.com/mgcrea/angular-strap/blob/master/src/aside/aside.tpl.html" target="_blank">like this</a>).</p>\n          </td>\n        </tr>\n        <tr>\n          <td>contentTemplate</td>\n          <td>path</td>\n          <td>false</td>\n          <td>\n            <p>If provided, fetches the partial and includes it as the inner content, can be either a remote URL or a cached template id.</p>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  <div class="callout callout-info">\n    <h4>Default options</h4>\n    <p>You can override global defaults for the plugin with <code>$asideProvider.defaults</code></p>\n    <div class="highlight">\n      <pre class="bs-exemple-code">\n        <code class="javascript" highlight-block>\n          angular.module(\'myApp\')\n          .config(function($asideProvider) {\n            angular.extend($asideProvider.defaults, {\n              animation: \'am-fadeAndSlideLeft\',\n              placement: \'left\'\n            });\n          })\n        </code>\n      </pre>\n    </div>\n  </div>\n\n\n  <h3>Scope methods</h3>\n  <p>Methods available inside the directive scope to toggle visibility.</p>\n\n  <h4>$show()</h4>\n  <p>Reveals the aside.</p>\n\n  <h4>$hide()</h4>\n  <p>Hides the aside.</p>\n\n  <h4>$toggle()</h4>\n  <p>Toggles the aside.</p>\n\n</div>\n'),a.put("aside/docs/aside.tpl.demo.html",'<div class="aside" tabindex="-1" role="dialog">\n  <div class="aside-dialog">\n    <div class="aside-content">\n      <div class="aside-header" ng-show="title">\n        <button type="button" class="close" ng-click="$hide()">&times;</button>\n        <h4 class="aside-title" ng-bind-html="title"></h4>\n      </div>\n      <div class="aside-body" ng-show="content">\n\n        <h4>Text in aside</h4>\n        <p ng-bind-html="content"></p>\n        <pre>2 + 3 = {{ 2 + 3 }}</pre>\n\n        <h4>Popover in aside</h4>\n        <p>This <button type="button" class="btn btn-default popover-test" data-title="A Title" data-content="And here\'s some amazing content. It\'s very engaging. right?" bs-popover>button</button> should trigger a popover on click.</p>\n\n        <h4>Tooltips in aside</h4>\n        <p><a href="#" class="tooltip-test" data-title="Tooltip" bs-tooltip>This link</a> and <a href="#" class="tooltip-test" data-title="Tooltip" bs-tooltip>that link</a> should have tooltips on hover.</p>\n\n      </div>\n      <div class="aside-footer">\n        <button type="button" class="btn btn-default" ng-click="$hide()">Close</button>\n        <button type="button" class="btn btn-primary" ng-click="$hide()">Save changes</button>\n      </div>\n    </div>\n  </div>\n</div>\n'),a.put("button/docs/button.demo.html",'<div class="bs-docs-section" ng-controller="ButtonDemoCtrl">\n\n  <div class="page-header">\n    <h1 id="buttons">Buttons <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/button/button.js" target="_blank">button.js</a>\n    </h1>\n    <code>mgcrea.ngStrap.button</code>\n  </div>\n\n\n    <h2 id="buttons-examples">Examples</h2>\n    <p>Do more with buttons. Control button states or create groups of buttons for more components like toolbars.</p>\n    <p>This modules exposes two directives: <code>bs-checkbox</code> and <code>bs-radio</code> that can be used as attributes to trigger toggle, checkbox or radio behavior.</p>\n    <div class="callout callout-info">\n      <h4>Group directives are also available as shortcuts</h4>\n      <p>Use <code>bs-checkbox-group</code> and <code>bs-radio-group</code> to easily setup the proper markup at compile time.</p>\n    </div>\n\n    <h3 id="buttons-usage">Live demo <a class="small edit-plunkr" data-module-name="mgcrea.ngStrapDocs" data-content-html-url="button/docs/button.demo.html" data-content-js-url="button/docs/button.demo.js" ng-plunkr data-title="edit in plunker" data-placement="right" bs-tooltip>clog.info</a></h3>\n\n    <pre class="bs-example-scope">$scope.button = {{button | json}};</pre>\n    <div class="bs-example" style="padding-bottom: 24px;" append-source>\n\n      <label>Toggle:</label>\n      <button type="button" class="btn btn-default" ng-model="button.toggle" bs-checkbox>Toggle</button>\n      <!-- You can also use custom values with the `data-true-value` & `data-false-value` attributes -->\n\n      <hr><label>Checkboxes:</label>\n      <div class="btn-group" ng-model="button.checkbox" bs-checkbox-group>\n        <label class="btn btn-default"><input type="checkbox" value="left"> Left</label>\n        <label class="btn btn-default"><input type="checkbox" value="middle"> Middle</label>\n        <label class="btn btn-default"><input type="checkbox" value="right"> Right</label>\n        <!-- Children get compiled by `bs-checkbox-group` to :\n        <label class="btn btn-default"><input type="checkbox" value="left" ng-model="button.checkbox.left" bs-checkbox> Left</label>\n        ...\n        -->\n      </div>\n\n      <hr><label>Radios:</label>\n      <div class="btn-group" ng-model="button.radio" bs-radio-group>\n        <label class="btn btn-default"><input type="radio" class="btn btn-default" value="0"> First</label>\n        <label class="btn btn-default"><input type="radio" class="btn btn-default" value="1"> Second</label>\n        <label class="btn btn-default"><input type="radio" class="btn btn-default" value="2"> Third</label>\n        <!-- Children get compiled by `bs-radio-group` to :\n        <label class="btn btn-default"><input type="radio" class="btn btn-default" value="left" ng-model="button.radio" bs-radio> Left</label>\n        ...\n        -->\n      </div>\n\n    </div>\n\n    <div class="callout callout-info">\n      <h4>Type support</h4>\n      <p>Theses directives can handle both <code>strings</code>, <code>numbers</code> and <code>booleans</code> values.</p>\n    </div>\n\n</div>\n'),a.put("datepicker/docs/datepicker.demo.html",'<div class="bs-docs-section" ng-controller="DatepickerDemoCtrl">\n\n  <div class="page-header">\n    <h1 id="datepickers">Datepickers <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/datepicker/datepicker.js" target="_blank">datepicker.js</a>\n    </h1>\n    <code>mgcrea.ngStrap.datepicker</code>\n  </div>\n\n\n  <h2 id="datepickers-examples">Examples</h2>\n  <p>Add datepicker functionality with any form text input.</p>\n\n  <div class="callout callout-danger">\n    <h4>Plugin dependency</h4>\n    <p>Datepickers require the <a href="#tooltips">tooltip module</a> and <a href="//github.com/mgcrea/angular-strap/blob/master/src/helpers/date-parser.js" target="_blank">dateParser helper</a> module to be loaded.</p>\n  </div>\n\n  <div class="callout callout-info">\n    <h4>Support for locales</h4>\n    <p>This module leverages the <a href="http://docs.angularjs.org/api/ng.$locale">$locale</a> service. You just have to load the proper <a href="http://docs.angularjs.org/guide/i18n">i18n</a> file to seamlessly translate your datepickers.</p>\n  </div>\n\n  <h3>Live demo <a class="small edit-plunkr" data-module-name="mgcrea.ngStrapDocs" data-content-html-url="datepicker/docs/datepicker.demo.html" data-content-js-url="datepicker/docs/datepicker.demo.js" ng-plunkr data-placement="right" bs-tooltip></a></h3>\n  <pre class="bs-example-scope">$scope.selectedDate = {{selectedDate}}; // &lt;- {{ getType(\'selectedDate\') }}\n$scope.selectedDateAsNumber = {{selectedDateAsNumber}}; // &lt;- {{ getType(\'selectedDateAsNumber\') }}\n$scope.fromDate = {{fromDate}}; // &lt;- {{ getType(\'fromDate\') }}\n$scope.untilDate = {{untilDate}}; // &lt;- {{ getType(\'untilDate\') }}\n</pre>\n  <div class="bs-example" style="padding-bottom: 24px;" append-source>\n    <form name="datepickerForm" class="form-inline" role="form">\n      <!-- Basic example -->\n      <div class="form-group" ng-class="{\'has-error\': datepickerForm.date.$invalid}">\n        <label class="control-label"><i class="fa fa-calendar"></i> Date <small>(as date)</small></label>\n        <input type="text" class="form-control" ng-model="selectedDate" name="date" bs-datepicker>\n      </div>\n      <!-- Custom example -->\n      <div class="form-group" ng-class="{\'has-error\': datepickerForm.date2.$invalid}">\n        <label class="control-label"><i class="fa fa-calendar"></i> Date <small>(as number)</small></label>\n        <input type="text" class="form-control" ng-model="selectedDateAsNumber" data-date-format="yyyy-MM-dd" data-date-type="number" data-min-date="02/10/86" data-max-date="today" data-autoclose="1" name="date2" bs-datepicker>\n      </div>\n      <hr>\n      <!-- Date range example -->\n      <div class="form-group">\n        <label class="control-label"><i class="fa fa-calendar"></i> <i class="fa fa-arrows-h"></i> <i class="fa fa-calendar"></i> Date range <small>(dynamic)</small></label><br>\n        <div class="form-group" class="col-xs-3">\n          <input type="text" class="form-control" ng-model="fromDate"  data-max-date="{{untilDate}}" placeholder="From" bs-datepicker>\n        </div>\n        <div class="form-group" class="col-xs-3">\n          <input type="text" class="form-control" ng-model="untilDate"  data-min-date="{{fromDate}}" placeholder="Until" bs-datepicker>\n        </div>\n      </div>\n    </form>\n  </div>\n\n\n  <h2 id="datepickers-usage">Usage</h2>\n  <p>Append a <code>bs-datepicker</code>attribute to any element to enable the directive.</p>\n  <div class="callout callout-info">\n    <h4>The module exposes a <code>$datepicker</code>service</h4>\n    <p>Available for programmatic use (mainly in directives as it requires a DOM element).</p>\n    <div class="highlight">\n      <pre>\n        <code class="javascript" highlight-block>\n          var myDatepicker = $datepicker(element, ngModelController);\n        </code>\n      </pre>\n    </div>\n  </div>\n\n  <h3>Options</h3>\n  <p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p>\n  <div class="callout callout-info">\n    <h4>This module supports exotic placement options!</h4>\n    <p>You can position your select in corners (such as <code>bottom-left</code>) or any other combination two.</p>\n    <p>Exotic placement options are not part of the Bootstrap\'s core, to use them you must use <code>bootstrap-additions.css</code> from the <a href="//github.com/mgcrea/bootstrap-additions" target="_blank">BootstrapAdditions</a> project. This project being not yet fully released, meanwhile, you can use the <a href="//mgcrea.github.io/angular-strap/static/styles/bootstrap-additions.min.css" target="_blank">development snapshot</a> compiled for theses docs.</p>\n  </div>\n  <div class="table-responsive">\n    <table class="table table-bordered table-striped">\n      <thead>\n        <tr>\n          <th style="width: 100px;">Name</th>\n          <th style="width: 100px;">type</th>\n          <th style="width: 50px;">default</th>\n          <th>description</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>animation</td>\n          <td>string</td>\n          <td>am-fade</td>\n          <td>apply a CSS animation powered by <code>ngAnimate</code></td>\n        </tr>\n        <tr>\n          <td>placement</td>\n          <td>string</td>\n          <td>\'bottom-left\'</td>\n          <td>how to position the typeahead - top | bottom | left | right, or any combination like bottom-left.</td>\n        </tr>\n        <tr>\n          <td>trigger</td>\n          <td>string</td>\n          <td>\'focus\'</td>\n          <td>how typeahead is triggered - click | hover | focus | manual</td>\n        </tr>\n        <tr>\n          <td>html</td>\n          <td>boolean</td>\n          <td>false</td>\n          <td>replace <code>ng-bind</code> with <code>ng-bind-html</code>, requires <code>ngSanitize</code> to be loaded</td>\n        </tr>\n        <tr>\n          <td>delay</td>\n          <td>number | object</td>\n          <td>0</td>\n          <td>\n            <p>delay showing and hiding the typeahead (ms) - does not apply to manual trigger type</p>\n            <p>If a number is supplied, delay is applied to both hide/show</p>\n            <p>Object structure is:\n              <code>delay: { show: 500, hide: 100 }</code>\n            </p>\n          </td>\n        </tr>\n        <tr>\n          <td>container</td>\n          <td>string | false</td>\n          <td>false</td>\n          <td>\n            <p>Appends the typeahead to a specific element. Example:\n              <code>container: \'body\'</code>. This option is particularly useful in that it allows you to position the typeahead in the flow of the document near the triggering element -&nbsp;which will prevent the typeahead from floating away from the triggering element during a window resize.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>template</td>\n          <td>path | id</td>\n          <td>\'$typeahead\'</td>\n          <td>\n            <p>If provided, overrides the default template, can be either a remote URL or a cached template id.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>dateFormat</td>\n          <td>string</td>\n          <td>\'shortDate\'</td>\n          <td>\n            <p>Rendering format of your date, leverages <a href="http://docs.angularjs.org/api/ng.filter:date">ng.filter:date</a>.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>dateType</td>\n          <td>string</td>\n          <td>\'date\'</td>\n          <td>\n            <p>Expected model type of your date - date | number | iso | string</p>\n          </td>\n        </tr>\n        <tr>\n          <td>autoclose</td>\n          <td>boolean</td>\n          <td>false</td>\n          <td>\n            <p>Whether the picker should close itself upon select.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>minDate</td>\n          <td>date*</td>\n          <td>-Infinity</td>\n          <td>\n            <p>Minimum allowed date for selection <small>(* fed into the <code>Date</code> constructor)</small>. You can use the string "today" that will resolve the current date.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>maxDate</td>\n          <td>date*</td>\n          <td>+Infinity</td>\n          <td>\n            <p>Maximum allowed date for selection <small>(* fed into the <code>Date</code> constructor)</small>. You can use the string "today" that will resolve the current date.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>startView</td>\n          <td>number</td>\n          <td>0</td>\n          <td>\n            <p>View that sould be opened by default - 0 | 1 | 2.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>minView</td>\n          <td>number</td>\n          <td>0</td>\n          <td>\n            <p>Minimum allowed view - 0 | 1 | 2. 1 will only allow month selection.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>startWeek</td>\n          <td>number</td>\n          <td>1</td>\n          <td>\n            <p>First day of the week.</p>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  <div class="callout callout-info">\n    <h4>Default options</h4>\n    <p>You can override global defaults for the plugin with <code>$datepickerProvider.defaults</code></p>\n    <div class="highlight">\n      <pre class="bs-exemple-code">\n        <code class="javascript" highlight-block>\n          angular.module(\'myApp\')\n          .config(function($datepickerProvider) {\n            angular.extend($datepickerProvider.defaults, {\n              dateFormat: \'dd/MM/yyyy\',\n              startWeek: 1\n            });\n          })\n        </code>\n      </pre>\n    </div>\n  </div>\n\n</div>\n'),a.put("dropdown/docs/dropdown.demo.html",'<div class="bs-docs-section" ng-controller="DropdownDemoCtrl">\n\n  <div class="page-header">\n    <h1 id="dropdowns">Dropdowns <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/dropdown/dropdown.js" target="_blank">dropdown.js</a>\n    </h1>\n    <code>mgcrea.ngStrap.dropdown</code>\n  </div>\n\n\n  <h2 id="dropdowns-examples">Examples</h2>\n  <p>Add dropdown menus to nearly anything with this simple plugin, including the navbar, tabs, and pills.</p>\n  <p>Append a <code>bs-dropdown</code> attribute to any element to enable the plugin.</p>\n\n  <div class="callout callout-danger">\n    <h4>Plugin dependency</h4>\n    <p>Dropdowns require the <a href="#tooltips">tooltip plugin</a> to be included.</p>\n  </div>\n\n  <h3>Live demo <a class="small edit-plunkr" data-module-name="mgcrea.ngStrapDocs" data-content-html-url="dropdown/docs/dropdown.demo.html" data-content-js-url="dropdown/docs/dropdown.demo.js" ng-plunkr data-title="edit in plunker" data-placement="right" bs-tooltip>clog.info</a></h3>\n  <pre class="bs-example-scope">$scope.dropdown = {{dropdown | json}};</pre>\n  <div class="bs-example" style="padding-bottom: 24px;" append-source>\n\n    <!-- Button to trigger a default dropdown with a scope as an object [{title:\'\', content:\'\', etc.}] -->\n    <button type="button" class="btn btn-lg btn-primary" data-animation="am-flip-x" bs-dropdown="dropdown">Click to toggle dropdown\n      <br />\n      <small>(using an object)</small>\n    </button>\n\n  </div>\n\n  <h2 id="dropdowns-usage">Usage</h2>\n  <p>Append a <code>bs-dropdown</code>attribute to any element to enable the directive.</p>\n  <div class="callout callout-info">\n    <h4>The module exposes a <code>$dropdown</code>service</h4>\n    <p>Available for programmatic use (mainly in directives as it requires a DOM element).</p>\n    <div class="highlight">\n      <pre>\n        <code class="javascript" highlight-block>\n          var myDropdown = $dropdown(element, {title: \'My Title\', content: \'My Content\'});\n        </code>\n      </pre>\n    </div>\n  </div>\n\n  <h3>Options</h3>\n  <p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p>\n  <p>For directives, you can naturally inherit the contextual <code>$scope</code> or leverage a custom one with an <a href="http://docs.angularjs.org/guide/expression">AngularJS expression</a> to evaluate as an object directly on the <code>bs-dropdown</code> attribute</p>\n  <div class="callout callout-info">\n    <h4>This module supports exotic placement options!</h4>\n    <p>You can position your dropdown in corners (such as <code>bottom-left</code>) or any other combination two.</p>\n    <p>Exotic placement options are not part of the Bootstrap\'s core, to use them you must use <code>bootstrap-additions.css</code> from the <a href="//github.com/mgcrea/bootstrap-additions" target="_blank">BootstrapAdditions</a> project. This project being not yet fully released, meanwhile, you can use the <a href="//mgcrea.github.io/angular-strap/static/styles/bootstrap-additions.min.css" target="_blank">development snapshot</a> compiled for theses docs.</p>\n  </div>\n  <div class="table-responsive">\n    <table class="table table-bordered table-striped">\n      <thead>\n        <tr>\n          <th style="width: 100px;">Name</th>\n          <th style="width: 100px;">type</th>\n          <th style="width: 50px;">default</th>\n          <th>description</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>animation</td>\n          <td>string</td>\n          <td>am-fade</td>\n          <td>apply a CSS animation powered by <code>ngAnimate</code></td>\n        </tr>\n        <tr>\n          <td>placement</td>\n          <td>string</td>\n          <td>\'bottom-left\'</td>\n          <td>how to position the dropdown - top | bottom | left | right, or any combination like bottom-left.</td>\n        </tr>\n        <tr>\n          <td>trigger</td>\n          <td>string</td>\n          <td>\'click\'</td>\n          <td>how dropdown is triggered - click | hover | focus | manual</td>\n        </tr>\n        <tr>\n          <td>html</td>\n          <td>boolean</td>\n          <td>false</td>\n          <td>replace <code>ng-bind</code> with <code>ng-bind-html</code>, requires <code>ngSanitize</code> to be loaded</td>\n        </tr>\n        <tr>\n          <td>delay</td>\n          <td>number | object</td>\n          <td>0</td>\n          <td>\n            <p>delay showing and hiding the dropdown (ms) - does not apply to manual trigger type</p>\n            <p>If a number is supplied, delay is applied to both hide/show</p>\n            <p>Object structure is:\n              <code>delay: { show: 500, hide: 100 }</code>\n            </p>\n          </td>\n        </tr>\n        <tr>\n          <td>container</td>\n          <td>string | false</td>\n          <td>false</td>\n          <td>\n            <p>Appends the dropdown to a specific element. Example:\n              <code>container: \'body\'</code>. This option is particularly useful in that it allows you to position the dropdown in the flow of the document near the triggering element -&nbsp;which will prevent the dropdown from floating away from the triggering element during a window resize.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>template</td>\n          <td>path</td>\n          <td>false</td>\n          <td>\n            <p>If provided, overrides the default template, can be either a remote URL or a cached template id.</p>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  <div class="callout callout-info">\n    <h4>Default options</h4>\n    <p>You can override global defaults for the plugin with <code>$dropdownProvider.defaults</code></p>\n    <div class="highlight">\n      <pre class="bs-exemple-code">\n        <code class="javascript" highlight-block>\n          angular.module(\'myApp\')\n          .config(function($dropdownProvider) {\n            angular.extend($dropdownProvider.defaults, {\n              animation: \'am-flip-x\',\n              trigger: \'hover\'\n            });\n          })\n        </code>\n      </pre>\n    </div>\n  </div>\n\n</div>\n'),a.put("modal/docs/modal.demo.html",'<div class="bs-docs-section" ng-controller="ModalDemoCtrl">\n\n  <div class="page-header">\n    <h1 id="modals">Modals <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/modal/modal.js" target="_blank">modal.js</a>\n    </h1>\n    <code>mgcrea.ngStrap.modal</code>\n  </div>\n\n\n  <h2 id="modals-examples">Examples</h2>\n  <p>Modals are streamlined, but flexible, dialog prompts with the minimum required functionality and smart defaults.</p>\n\n  <h3>Live demo <a class="small edit-plunkr" data-module-name="mgcrea.ngStrapDocs" data-content-html-url="modal/docs/modal.demo.html" data-content-js-url="modal/docs/modal.demo.js" ng-plunkr data-title="edit in plunker" data-placement="right" bs-tooltip>clog.info</a></h3>\n  <pre class="bs-example-scope">$scope.modal = {{modal | json}};</pre>\n  <div class="bs-example" style="padding-bottom: 24px;" append-source>\n\n    <!-- Button to trigger a default modal with a scope as an object {title:\'\', content:\'\', etc.} -->\n    <button type="button" class="btn btn-lg btn-primary" data-animation="am-fade-and-scale" data-placement="center" bs-modal="modal">Click to toggle modal\n      <br />\n      <small>(using an object)</small>\n    </button>\n\n    <!-- You can use a custom html template with the `data-template` attr -->\n    <button type="button" class="btn btn-lg btn-danger" data-animation="am-fade-and-slide-top" data-template="modal/docs/modal.tpl.demo.html" bs-modal="modal">Custom Modal\n      <br />\n      <small>(using data-template)</small>\n    </button>\n\n  </div>\n\n  <div class="callout callout-info">\n    <h4>Backdrop animation</h4>\n    <p>Backdrop animation being powered by <code>ngAnimate</code>, it requires custom CSS.</p>\n    <pre class="bs-exemple-code">\n      <code class="css" highlight-block>\n        .modal-backdrop.am-fade {\n          opacity: .5;\n          transition: opacity .15s linear;\n          &.ng-enter {\n            opacity: 0;\n            &.ng-enter-active {\n              opacity: .5;\n            }\n          }\n          &.ng-leave {\n            opacity: .5;\n            &.ng-leave-active {\n              opacity: 0;\n            }\n          }\n        }\n      </code>\n    </pre>\n  </div>\n\n  <h2 id="modals-usage">Usage</h2>\n  <p>Append a <code>bs-modal</code>attribute to any element to activate the directive.</p>\n  <div class="callout callout-info">\n    <h4>The module also exposes a <code>$modal</code>service</h4>\n    <p>Available for programmatic use (inside a directive/controller).</p>\n    <div class="highlight">\n      <pre>\n        <code class="javascript" highlight-block>\n          angular.module(\'myApp\')\n          .controller(\'DemoCtrl\', function($scope, $modal) {\n            // Show a basic modal from a controller\n            var myModal = $modal({title: \'My Title\', content: \'My Content\', show: true});\n\n            // Pre-fetch an external template populated with a custom scope\n            var myOtherModal = $modal({scope: $scope, template: \'modal/docs/modal.tpl.demo.html\'});\n            // Show when some event occurs (use $promise property to ensure the template has been loaded)\n            myOtherModal.$promise.then(function() {\n              myOtherModal.show();\n            })\n          })\n        </code>\n      </pre>\n    </div>\n  </div>\n\n\n  <h3>Options</h3>\n  <p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p>\n  <p>For directives, you can naturally inherit the contextual <code>$scope</code> or leverage a custom one with an <a href="http://docs.angularjs.org/guide/expression">AngularJS expression</a> to evaluate as an object directly on the <code>bs-modal</code> attribute</p>\n  <div class="table-responsive">\n    <table class="table table-bordered table-striped">\n      <thead>\n        <tr>\n          <th style="width: 100px;">Name</th>\n          <th style="width: 50px;">type</th>\n          <th style="width: 50px;">default</th>\n          <th>description</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>animation</td>\n          <td>string</td>\n          <td>am-fade</td>\n          <td>apply a CSS animation powered by ngAnimate</td>\n        </tr>\n        <tr>\n          <td>backdropAnimation</td>\n          <td>string</td>\n          <td>am-fade</td>\n          <td>apply a CSS animation to backdrop powered by ngAnimate</td>\n        </tr>\n        <tr>\n          <td>placement</td>\n          <td>string</td>\n          <td>\'top\'</td>\n          <td>how to position the modal - top | bottom | center <small>(requires custom CSS)</small>.</td>\n        </tr>\n        <tr>\n          <td>title</td>\n          <td>string</td>\n          <td>\'\'</td>\n          <td>default title value if <code>title</code>attribute isn\'t present</td>\n        </tr>\n        <tr>\n          <td>content</td>\n          <td>string</td>\n          <td>\'\'</td>\n          <td>default content value if <code>data-content</code>attribute isn\'t present</td>\n        </tr>\n        <tr>\n          <td>html</td>\n          <td>boolean</td>\n          <td>false</td>\n          <td>replace <code>ng-bind</code> with <code>ng-bind-html</code>, requires <code>ngSanitize</code> to be loaded</td>\n        </tr>\n        <tr>\n          <td>backdrop</td>\n          <td>boolean or the string <code>\'static\'</code>\n          </td>\n          <td>true</td>\n          <td>Includes a modal-backdrop element. Alternatively, specify <code>static</code>for a backdrop which doesn\'t close the modal on click.</td>\n        </tr>\n        <tr>\n          <td>keyboard</td>\n          <td>boolean</td>\n          <td>true</td>\n          <td>Closes the modal when escape key is pressed</td>\n        </tr>\n        <tr>\n          <td>show</td>\n          <td>boolean</td>\n          <td>true</td>\n          <td>Shows the modal when initialized.</td>\n        </tr>\n        <tr>\n          <td>container</td>\n          <td>string | false</td>\n          <td>false</td>\n          <td>\n            <p>Appends the popover to a specific element. Example: <code>container: \'body\'</code>. This option is particularly useful in that it allows you to position the popover in the flow of the document near the triggering element -&nbsp;which will prevent the popover from floating away from the triggering element during a window resize.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>template</td>\n          <td>path</td>\n          <td>false</td>\n          <td>\n            <p>If provided, overrides the default template, can be either a remote URL or a cached template id.</p>\n            <p>It should be a <code>div.modal</code> element following Twitter Bootstrap styles conventions (<a href="//github.com/mgcrea/angular-strap/blob/master/src/modal/modal.tpl.html" target="_blank">like this</a>).</p>\n          </td>\n        </tr>\n        <tr>\n          <td>contentTemplate</td>\n          <td>path</td>\n          <td>false</td>\n          <td>\n            <p>If provided, fetches the partial and includes it as the inner content, can be either a remote URL or a cached template id.</p>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  <div class="callout callout-info">\n    <h4>Default options</h4>\n    <p>You can override global defaults for the plugin with <code>$modalProvider.defaults</code></p>\n    <div class="highlight">\n      <pre class="bs-exemple-code">\n        <code class="javascript" highlight-block>\n          angular.module(\'myApp\')\n          .config(function($modalProvider) {\n            angular.extend($modalProvider.defaults, {\n              animation: \'am-flip-x\'\n            });\n          })\n        </code>\n      </pre>\n    </div>\n  </div>\n\n  <h3>Scope methods</h3>\n  <p>Methods available inside the directive scope to toggle visibility.</p>\n\n  <h4>$show()</h4>\n  <p>Reveals the modal.</p>\n\n  <h4>$hide()</h4>\n  <p>Hides the modal.</p>\n\n  <h4>$toggle()</h4>\n  <p>Toggles the modal.</p>\n\n</div>\n'),a.put("modal/docs/modal.tpl.content.demo.html",'<div class="modal-inner-content">\n\n  <h4>Text in a modal</h4>\n  <p ng-bind-html="content"></p>\n  <pre>2 + 3 = {{ 2 + 3 }}</pre>\n\n  <h4>Popover in a modal</h4>\n  <p>This <a href="#" role="button" class="btn btn-default popover-test" data-title="A Title" data-content="And here\'s some amazing content. It\'s very engaging. right?" bs-popover>button</a> should trigger a popover on click.</p>\n\n  <h4>Tooltips in a modal</h4>\n  <p><a href="#" class="tooltip-test" data-title="Tooltip" bs-tooltip>This link</a> and <a href="#" class="tooltip-test" data-title="Tooltip" bs-tooltip>that link</a> should have tooltips on hover.</p>\n\n</div>\n<div class="modal-footer" style="margin: 15px -20px -20px;">\n\n  <button type="button" class="btn btn-default" ng-click="$hide()">Close</button>\n  <button type="button" class="btn btn-primary" ng-click="$hide()">Save changes</button>\n\n</div>\n'),a.put("modal/docs/modal.tpl.demo.html",'<div class="modal" tabindex="-1" role="dialog">\n  <div class="modal-dialog">\n    <div class="modal-content">\n      <div class="modal-header" ng-show="title">\n        <button type="button" class="close" ng-click="$hide()">&times;</button>\n        <h4 class="modal-title" ng-bind-html="title"></h4>\n      </div>\n      <div class="modal-body" ng-show="content">\n\n        <h4>Text in a modal</h4>\n        <p ng-bind-html="content"></p>\n        <pre>2 + 3 = {{ 2 + 3 }}</pre>\n\n        <h4>Popover in a modal</h4>\n        <p>This <a href="#" role="button" class="btn btn-default popover-test" data-title="A Title" data-content="And here\'s some amazing content. It\'s very engaging. right?" bs-popover>button</a> should trigger a popover on click.</p>\n\n        <h4>Tooltips in a modal</h4>\n        <p><a href="#" class="tooltip-test" data-title="Tooltip" bs-tooltip>This link</a> and <a href="#" class="tooltip-test" data-title="Tooltip" bs-tooltip>that link</a> should have tooltips on hover.</p>\n\n      </div>\n      <div class="modal-footer">\n        <button type="button" class="btn btn-default" ng-click="$hide()">Close</button>\n        <button type="button" class="btn btn-primary" ng-click="$hide()">Save changes</button>\n      </div>\n    </div>\n  </div>\n</div>\n'),a.put("navbar/docs/navbar.demo.html",'<div class="bs-docs-section">\n\n  <div class="page-header">\n    <h1 id="navbars">Navbar <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/navbar/navbar.js" target="_blank">navbar.js</a>\n    </h1>\n    <code>mgcrea.ngStrap.navbar</code>\n  </div>\n\n\n  <h2 id="navbars-examples">Examples</h2>\n  <p>Add quick, dynamic navbar functionality to transition through active/inactive states.</p>\n\n  <h3>Live demo <a class="small edit-plunkr" data-module-name="mgcrea.ngStrapDocs" data-content-html-url="navbar/docs/navbar.demo.html" ng-plunkr data-title="edit in plunker" data-placement="right" bs-tooltip></a></h3>\n  <pre class="bs-example-scope">$location.path() = "{{$location.path()}}";</pre>\n  <div class="bs-example" append-source>\n    <div class="navbar navbar-default" role="navigation" bs-navbar>\n      <div class="navbar-header">\n        <a class="navbar-brand" href="#">Brand</a>\n      </div>\n      <ul class="nav navbar-nav">\n        <li data-match-route="/?(navbar)?"><a href="#/">Home</a></li>\n        <li data-match-route="/page-one"><a href="#/page-one">Page One</a></li>\n        <li data-match-route="/page-two.*"><a href="#/page-two/sub-a">Page Two</a></li>\n      </ul>\n    </div>\n  </div>\n\n  <h2 id="navbars-usage">Usage</h2>\n  <p>Append a <code>bs-navbar</code>attribute to any element to activate the directive.</p>\n  <p>Use <code>data-match-route</code> attributes to any children navigation item that should be toggled active.</p>\n  <div class="callout callout-info">\n    <h4>Heads up!</h4>\n    <p>The directives also supports <code>HTML5 mode</code>, you just have to drop the <code>href</code> dashes.</p>\n  </div>\n\n\n  <h3>Options</h3>\n  <p>Options can be passed via data attributes, append the option name to <code>data-</code>, as in <code>data-route-attr=""</code>.</p>\n  <div class="table-responsive">\n    <table class="table table-bordered table-striped">\n      <thead>\n        <tr>\n          <th style="width: 100px;">Name</th>\n          <th style="width: 100px;">type</th>\n          <th style="width: 50px;">default</th>\n          <th>description</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>activeClass</td>\n          <td>string</td>\n          <td>active</td>\n          <td>Class to apply when the navigation item is active</td>\n        </tr>\n        <tr>\n          <td>routeAttr</td>\n          <td>string</td>\n          <td>data-match-route</td>\n          <td>Attribute to test against <code>$location.path()</code></td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  <div class="callout callout-info">\n    <h4>Default options</h4>\n    <p>You can override global defaults for the plugin with <code>$navbarProvider.defaults</code></p>\n    <div class="highlight">\n      <pre class="bs-exemple-code">\n        <code class="javascript" highlight-block>\n          angular.module(\'myApp\')\n          .config(function($navbarProvider) {\n            angular.extend($navbarProvider.defaults, {\n              activeClass: \'in\'\n            });\n          })\n        </code>\n      </pre>\n    </div>\n  </div>\n\n</div>\n\n'),a.put("popover/docs/popover.demo.html",'<div class="bs-docs-section" ng-controller="PopoverDemoCtrl">\n\n  <div class="page-header">\n    <h1 id="popovers">Popovers <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/popover/popover.js" target="_blank">popover.js</a>\n    </h1>\n    <code>mgcrea.ngStrap.popover</code>\n  </div>\n\n\n  <h2 id="popovers-examples">Examples</h2>\n  <p>Add small overlays of content on tap, like those on the iPad, to any element for housing secondary information.</p>\n\n  <div class="callout callout-danger">\n    <h4>Plugin dependency</h4>\n    <p>Popovers require the <a href="#tooltips">tooltip module</a> to be loaded.</p>\n  </div>\n\n  <h3>Live demo <a class="small edit-plunkr" data-module-name="mgcrea.ngStrapDocs" data-content-html-url="popover/docs/popover.demo.html" data-content-js-url="popover/docs/popover.demo.js" ng-plunkr data-title="edit in plunker" data-placement="right" bs-tooltip>clog.info</a></h3>\n  <div class="form-group hide">\n    <label>Title</label>\n    <input type="text" class="form-control" ng-model="popover.title" placeholder="Title">\n    <label>Content</label>\n    <textarea class="form-control" ng-model="popover.content" rows="3"></textarea>\n  </div>\n  <pre class="bs-example-scope">$scope.popover = {{popover | json}};</pre>\n  <div class="bs-example" style="padding-bottom: 24px;" append-source>\n    <!-- Button to trigger a default popover with a scope as an object {title:\'\', content:\'\', etc.} -->\n    <button type="button" class="btn btn-lg btn-primary" data-placement="bottom" data-animation="am-flip-x" bs-popover="popover">Click to toggle popover\n      <br />\n      <small>(using an object)</small>\n    </button>\n\n    <!-- You can also use data-attrs to assign scope variables -->\n    <button type="button" class="btn btn-lg btn-primary" data-placement="top-right" title="{{popover.title}}" data-content="{{popover.content}}" data-trigger="focus" bs-popover>Click to toggle popover\n      <br />\n      <small>(using data-attrs)</small>\n    </button>\n\n    <!-- You can use a custom html template with the `data-template` attr -->\n    <button type="button" class="btn btn-lg btn-danger" title="{{popover.title}}" data-content="{{popover.content}}" data-template="popover/docs/popover.tpl.demo.html" data-animation="am-flip-x" bs-popover>Custom Popover\n      <br />\n      <small>(using data-template)</small>\n    </button>\n  </div>\n\n  <h2 id="popovers-usage">Usage</h2>\n  <p>Append a <code>bs-popover</code>attribute to any element to enable the directive.</p>\n  <div class="callout callout-info">\n    <h4>The module exposes a <code>$popover</code>service</h4>\n    <p>Available for programmatic use (mainly in directives as it requires a DOM element).</p>\n    <div class="highlight">\n      <pre>\n        <code class="javascript" highlight-block>\n          var myPopover = $popover(element, {title: \'My Title\', content: \'My Content\'});\n        </code>\n      </pre>\n    </div>\n  </div>\n\n  <h3>Options</h3>\n  <p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p>\n  <p>For directives, you can naturally inherit the contextual <code>$scope</code> or leverage a custom one with an <a href="http://docs.angularjs.org/guide/expression">AngularJS expression</a> to evaluate as an object directly on the <code>bs-popover</code> attribute</p>\n  <div class="callout callout-info">\n    <h4>This module supports exotic placement options!</h4>\n    <p>You can position your popover in corners (such as <code>bottom-left</code>) or any other combination two.</p>\n    <p>Exotic placement options are not part of the Bootstrap\'s core, to use them you must use <code>bootstrap-additions.css</code> from the <a href="//github.com/mgcrea/bootstrap-additions" target="_blank">BootstrapAdditions</a> project. This project being not yet fully released, meanwhile, you can use the <a href="//mgcrea.github.io/angular-strap/static/styles/bootstrap-additions.min.css" target="_blank">development snapshot</a> compiled for theses docs.</p>\n  </div>\n  <div class="table-responsive">\n    <table class="table table-bordered table-striped">\n      <thead>\n        <tr>\n          <th style="width: 100px;">Name</th>\n          <th style="width: 100px;">type</th>\n          <th style="width: 50px;">default</th>\n          <th>description</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>animation</td>\n          <td>string</td>\n          <td>am-fade</td>\n          <td>apply a CSS animation powered by <code>ngAnimate</code></td>\n        </tr>\n        <tr>\n          <td>placement</td>\n          <td>string</td>\n          <td>\'right\'</td>\n          <td>how to position the popover - top | bottom | left | right, or any combination like bottom-left.</td>\n        </tr>\n        <tr>\n          <td>trigger</td>\n          <td>string</td>\n          <td>\'click\'</td>\n          <td>how popover is triggered - click | hover | focus | manual</td>\n        </tr>\n        <tr>\n          <td>title</td>\n          <td>string</td>\n          <td>\'\'</td>\n          <td>default title value if <code>title</code>attribute isn\'t present</td>\n        </tr>\n        <tr>\n          <td>content</td>\n          <td>string</td>\n          <td>\'\'</td>\n          <td>default content value if <code>data-content</code>attribute isn\'t present</td>\n        </tr>\n        <tr>\n          <td>html</td>\n          <td>boolean</td>\n          <td>false</td>\n          <td>replace <code>ng-bind</code> with <code>ng-bind-html</code>, requires <code>ngSanitize</code> to be loaded</td>\n        </tr>\n        <tr>\n          <td>delay</td>\n          <td>number | object</td>\n          <td>0</td>\n          <td>\n            <p>delay showing and hiding the popover (ms) - does not apply to manual trigger type</p>\n            <p>If a number is supplied, delay is applied to both hide/show</p>\n            <p>Object structure is:\n              <code>delay: { show: 500, hide: 100 }</code>\n            </p>\n          </td>\n        </tr>\n        <tr>\n          <td>container</td>\n          <td>string | false</td>\n          <td>false</td>\n          <td>\n            <p>Appends the popover to a specific element. Example:\n              <code>container: \'body\'</code>. This option is particularly useful in that it allows you to position the popover in the flow of the document near the triggering element -&nbsp;which will prevent the popover from floating away from the triggering element during a window resize.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>template</td>\n          <td>path</td>\n          <td>false</td>\n          <td>\n            <p>If provided, overrides the default template, can be either a remote URL or a cached template id.</p>\n            <p>It should be a <code>div.popover</code> element following Twitter Bootstrap styles conventions (<a href="//github.com/mgcrea/angular-strap/blob/master/src/popover/popover.tpl.html" target="_blank">like this</a>).</p>\n          </td>\n        </tr>\n        <tr>\n          <td>contentTemplate</td>\n          <td>path</td>\n          <td>false</td>\n          <td>\n            <p>If provided, fetches the partial and includes it as the inner content, can be either a remote URL or a cached template id.</p>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  <div class="callout callout-info">\n    <h4>Default options</h4>\n    <p>You can override global defaults for the plugin with <code>$popoverProvider.defaults</code></p>\n    <div class="highlight">\n      <pre class="bs-exemple-code">\n        <code class="javascript" highlight-block>\n          angular.module(\'myApp\')\n          .config(function($popoverProvider) {\n            angular.extend($popoverProvider.defaults, {\n              animation: \'am-flip-x\',\n              trigger: \'hover\'\n            });\n          })\n        </code>\n      </pre>\n    </div>\n  </div>\n\n  <h3>Scope methods</h3>\n  <p>Methods available inside the directive scope to toggle visibility.</p>\n\n  <h4>$show()</h4>\n  <p>Reveals the popover.</p>\n\n  <h4>$hide()</h4>\n  <p>Hides the popover.</p>\n\n  <h4>$toggle()</h4>\n  <p>Toggles the popover.</p>\n\n</div>\n'),a.put("popover/docs/popover.tpl.content.demo.html",'<form name="popoverForm">\n  <p ng-bind-html="content" style="min-width:300px;"></p>\n  <pre>2 + 3 = <span ng-cloak>{{ 2 + 3 }}</span></pre>\n  <div class="form-actions">\n    <button type="button" class="btn btn-danger" ng-click="$hide()">Close</button>\n    <button type="button" class="btn btn-primary" ng-click="popover.saved=true;$hide()">Save changes</button>\n  </div>\n</form>\n'),a.put("popover/docs/popover.tpl.demo.html",'<div class="popover" tabindex="-1" ng-show="content">\n  <div class="arrow"></div>\n  <h3 class="popover-title" ng-bind-html="title" ng-show="title"></h3>\n  <div class="popover-content">\n    <form name="popoverForm">\n      <p ng-bind-html="content" style="min-width:300px;"></p>\n      <pre>2 + 3 = <span ng-cloak>{{ 2 + 3 }}</span></pre>\n      <div class="form-actions">\n        <button type="button" class="btn btn-danger" ng-click="$hide()">Close</button>\n        <button type="button" class="btn btn-primary" ng-click="popover.saved=true;$hide()">Save changes</button>\n      </div>\n    </form>\n  </div>\n</div>\n'),a.put("scrollspy/docs/scrollspy.demo.html",'<div class="bs-docs-section">\n\n  <div class="page-header">\n    <h1 id="scrollspy">Scrollspy <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/scrollspy/scrollspy.js" target="_blank">scrollspy.js</a>\n    </h1>\n    <code>mgcrea.ngStrap.scrollspy</code>\n  </div>\n\n  <h2 id="scrollspy-examples">Examples</h2>\n  <p>The subnavigation on the left is a live demo of the scrollspy plugin.</p>\n\n  <div class="callout callout-warning">\n    <h4>Plugin dependency</h4>\n    <p>Scrollspy require the <a href="//github.com/mgcrea/angular-strap/blob/master/src/helpers/dimensions.js" target="_blank">helpers.dimensions</a> module to be loaded.</p>\n  </div>\n\n  <div class="highlight">\n    <pre>\n      <code class="html" highlight-block>\n        &lt;ul class="nav bs-sidenav"&gt;\n          &lt;li data-target="#modals" bs-scrollspy&gt;\n            &lt;a href="#modals"&gt;Modal&lt;/a&gt;\n            &lt;ul class="nav"&gt;\n              &lt;li data-target="#modals-examples" bs-scrollspy&gt;&lt;a href="#modals-examples"&gt;Examples&lt;/a&gt;&lt;/li&gt;\n              &lt;li data-target="#modals-usage" bs-scrollspy&gt;&lt;a href="#modals-usage"&gt;Usage&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n          &lt;/li&gt;\n        &lt;/ul&gt;\n\n        <!-- Alternatively, you can use the short following equivalent short markup -->\n        &lt;ul class="nav bs-sidenav" bs-scrollspy-list&gt;\n          &lt;li&gt;\n            &lt;a href="#modals"&gt;Modal&lt;/a&gt;\n            &lt;ul class="nav"&gt;\n              &lt;li&gt;&lt;a href="#modals-examples"&gt;Examples&lt;/a&gt;&lt;/li&gt;\n              &lt;li&gt;&lt;a href="#modals-usage"&gt;Usage&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n          &lt;/li&gt;\n        &lt;/ul&gt;\n      </code>\n    </pre>\n  </div>\n\n  <h2 id="scrollspy-usage">Usage</h2>\n  <p>Append a <code>bs-scrollspy</code>attribute to any element to enable the plugin.</p>\n  <div class="callout callout-info">\n    <h4>The module also exposes an <code>$scrollspy</code>service</h4>\n    <p>Available for programmatic use (mainly inside a directive as it requires an element).</p>\n    <div class="highlight">\n      <pre>\n        <code class="javascript" highlight-block>\n          var scrollspy = $scrollspy(element, options);\n        </code>\n      </pre>\n    </div>\n  </div>\n\n\n  <h3>Options</h3>\n  <p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p>\n  <div class="table-responsive">\n    <table class="table table-bordered table-striped">\n      <thead>\n        <tr>\n          <th style="width: 100px;">Name</th>\n          <th style="width: 50px;">type</th>\n          <th style="width: 50px;">default</th>\n          <th>description</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>target</td>\n          <td>string</td>\n          <td>\'\'</td>\n          <td>Required target selector.</td>\n        </tr>\n        <tr>\n          <td>offset</td>\n          <td>number</td>\n          <td>0</td>\n          <td>Pixels to offset from top of screen when calculating position of scroll.</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  <div class="callout callout-info">\n    <h4>Default options</h4>\n    <p>You can override global defaults for the plugin with <code>$scrollspyProvider.defaults</code></p>\n    <div class="highlight">\n      <pre class="bs-exemple-code">\n        <code class="javascript" highlight-block>\n          angular.module(\'myApp\')\n          .config(function($scrollspyProvider) {\n            angular.extend($scrollspyProvider.defaults, {\n              animation: \'am-fade-and-slide-top\',\n              placement: \'top\'\n            });\n          })\n        </code>\n      </pre>\n    </div>\n  </div>\n\n</div>\n'),a.put("select/docs/select.demo.html",'<div class="bs-docs-section" ng-controller="SelectDemoCtrl">\n\n  <div class="page-header">\n    <h1 id="selects">Selects <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/select/select.js" target="_blank">select.js</a>\n    </h1>\n    <code>mgcrea.ngStrap.select</code>\n  </div>\n\n\n  <h2 id="selects-examples">Examples</h2>\n  <p>Add quick, dynamic select functionality with any form text input.</p>\n\n  <div class="callout callout-danger">\n    <h4>Plugin dependency</h4>\n    <p>Selects require the <a href="#tooltips">tooltip module</a> and <a href="//github.com/mgcrea/angular-strap/blob/master/src/helpers/parse-options.js" target="_blank">parseOptions helper</a> module to be loaded.</p>\n  </div>\n\n  <h3>Live demo <a class="small edit-plunkr" data-module-name="mgcrea.ngStrapDocs" data-content-html-url="select/docs/select.demo.html" data-content-js-url="select/docs/select.demo.js" ng-plunkr data-title="edit in plunker" data-placement="right" bs-tooltip></a></h3>\n  <pre class="bs-example-scope">$scope.selectedIcon = "{{selectedIcon}}";\n$scope.selectedIcons = "{{selectedIcons}}";\n$scope.icons = "{{icons}}";\n</pre>\n  <div class="bs-example" style="padding-bottom: 24px;" append-source>\n\n    <label>Single select:&nbsp;</label>\n    <button type="button" class="btn btn-default" ng-model="selectedIcon" data-html="1" ng-options="icon.value as icon.label for icon in icons" bs-select>\n      Action <span class="caret"></span>\n    </button>\n    <hr>\n    <label>Multiple select:&nbsp;</label>\n    <button type="button" class="btn btn-default" ng-model="selectedIcons" data-html="1" data-multiple="1" data-animation="am-flip-x" ng-options="icon.value as icon.label for icon in icons" bs-select>\n      Action <span class="caret"></span>\n    </button>\n  </div>\n\n\n  <h2 id="selects-usage">Usage</h2>\n  <p>Append a <code>bs-select</code>attribute to any element to enable the directive.</p>\n  <div class="callout callout-info">\n    <h4>The module exposes a <code>$select</code>service</h4>\n    <p>Available for programmatic use (mainly in directives as it requires a DOM element).</p>\n    <div class="highlight">\n      <pre>\n        <code class="javascript" highlight-block>\n          var mySelect = $select(element, controller);\n        </code>\n      </pre>\n    </div>\n  </div>\n\n  <h3>Options</h3>\n  <p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p>\n  <div class="callout callout-info">\n    <h4>This module supports exotic placement options!</h4>\n    <p>You can position your select in corners (such as <code>bottom-left</code>) or any other combination two.</p>\n    <p>Exotic placement options are not part of the Bootstrap\'s core, to use them you must use <code>bootstrap-additions.css</code> from the <a href="//github.com/mgcrea/bootstrap-additions" target="_blank">BootstrapAdditions</a> project. This project being not yet fully released, meanwhile, you can use the <a href="//mgcrea.github.io/angular-strap/static/styles/bootstrap-additions.min.css" target="_blank">development snapshot</a> compiled for theses docs.</p>\n  </div>\n  <div class="table-responsive">\n    <table class="table table-bordered table-striped">\n      <thead>\n        <tr>\n          <th style="width: 100px;">Name</th>\n          <th style="width: 100px;">type</th>\n          <th style="width: 50px;">default</th>\n          <th>description</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>animation</td>\n          <td>string</td>\n          <td>am-fade</td>\n          <td>apply a CSS animation powered by <code>ngAnimate</code></td>\n        </tr>\n        <tr>\n          <td>placement</td>\n          <td>string</td>\n          <td>\'bottom-left\'</td>\n          <td>how to position the typeahead - top | bottom | left | right, or any combination like bottom-left.</td>\n        </tr>\n        <tr>\n          <td>trigger</td>\n          <td>string</td>\n          <td>\'focus\'</td>\n          <td>how typeahead is triggered - click | hover | focus | manual</td>\n        </tr>\n        <tr>\n          <td>html</td>\n          <td>boolean</td>\n          <td>false</td>\n          <td>replace <code>ng-bind</code> with <code>ng-bind-html</code>, requires <code>ngSanitize</code> to be loaded</td>\n        </tr>\n        <tr>\n          <td>delay</td>\n          <td>number | object</td>\n          <td>0</td>\n          <td>\n            <p>delay showing and hiding the typeahead (ms) - does not apply to manual trigger type</p>\n            <p>If a number is supplied, delay is applied to both hide/show</p>\n            <p>Object structure is:\n              <code>delay: { show: 500, hide: 100 }</code>\n            </p>\n          </td>\n        </tr>\n        <tr>\n          <td>container</td>\n          <td>string | false</td>\n          <td>false</td>\n          <td>\n            <p>Appends the typeahead to a specific element. Example:\n              <code>container: \'body\'</code>. This option is particularly useful in that it allows you to position the typeahead in the flow of the document near the triggering element -&nbsp;which will prevent the typeahead from floating away from the triggering element during a window resize.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>template</td>\n          <td>path | id</td>\n          <td>\'$typeahead\'</td>\n          <td>\n            <p>If provided, overrides the default template, can be either a remote URL or a cached template id.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>multiple</td>\n          <td>boolean</td>\n          <td>false</td>\n          <td>\n            <p>Whether multiple selections should be allowed.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>max-length</td>\n          <td>number</td>\n          <td>3</td>\n          <td>\n            <p>Maximum number of selected values that can be displayed inline.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>max-length-html</td>\n          <td>string</td>\n          <td>\'selected\'</td>\n          <td>\n            <p>Placeholder to append to an overflowed multiple selection.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>sort</td>\n          <td>boolean</td>\n          <td>true</td>\n          <td>\n            <p>Sort the order of the displayed labels.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>placeholder</td>\n          <td>string</td>\n          <td>\'Choose among the following...\'</td>\n          <td>\n            <p>Placeholder text when no value is selected.</p>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  <div class="callout callout-info">\n    <h4>Default options</h4>\n    <p>You can override global defaults for the plugin with <code>$selectProvider.defaults</code></p>\n    <div class="highlight">\n      <pre class="bs-exemple-code">\n        <code class="javascript" highlight-block>\n          angular.module(\'myApp\')\n          .config(function($selectProvider) {\n            angular.extend($selectProvider.defaults, {\n              animation: \'am-flip-x\',\n              sort: false\n            });\n          })\n        </code>\n      </pre>\n    </div>\n  </div>\n\n</div>\n'),a.put("tab/docs/pane.tpl.demo.html","<pre>{{pane.content}}</pre>\n"),a.put("tab/docs/tab.demo.html",'<div class="bs-docs-section" ng-controller="TabDemoCtrl">\n\n  <div class="page-header">\n    <h1 id="tabs">Tabs <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/tab/tab.js" target="_blank">tab.js</a>\n    </h1>\n    <code>mgcrea.ngStrap.tab</code>\n  </div>\n\n\n  <h2 id="tabs-examples">Examples</h2>\n  <p>Add quick, dynamic tab functionality to transition through panes of local content.</p>\n\n  <h3>Live demo <a class="small edit-plunkr" data-module-name="mgcrea.ngStrapDocs" data-content-html-url="tab/docs/tab.demo.html" data-content-js-url="tab/docs/tab.demo.js" ng-plunkr data-title="edit in plunker" data-placement="right" bs-tooltip>clog.info</a></h3>\n  <pre class="bs-example-scope">$scope.tabs = {{tabs | json}};</pre>\n  <div class="bs-example" append-source>\n    <!-- ngModel is optional -->\n    <div ng-model="tabs.activeTab" bs-tabs="tabs">\n    </div>\n  </div>\n  <div class="bs-example" style="padding-bottom: 24px;">\n    <label>activeTab:</label>\n    <strong class="text-danger">{{tabs.activeTab}}</strong>&nbsp;\n    <div class="btn-group" ng-model="tabs.activeTab" bs-radio-group>\n      <label class="btn btn-default">\n        <input type="radio" class="btn btn-default" value="0">First</label>\n      <label class="btn btn-default">\n        <input type="radio" class="btn btn-default" value="1">Second</label>\n      <label class="btn btn-default">\n        <input type="radio" class="btn btn-default" value="2">Third</label>\n    </div>\n  </div>\n\n  <h2 id="tabs-usage">Usage</h2>\n  <p>Append a <code>bs-tabs</code>attribute to any element to enable the directive.</p>\n\n  <div class="callout callout-info">\n    <h4>Custom animations</h4>\n    <p>Pane animation is done with <code>ngClass(\'active\')</code> callbacks and require custom CSS.</p>\n    <pre class="bs-exemple-code">\n      <code class="css" highlight-block>\n        .tabs.am-fade .tab-pane {\n          opacity: 1;\n          transition: opacity .3s ease;\n          min-height:60px;\n          &.active-add {\n            display: block;\n            opacity: 0;\n            &.active-add-active {\n              opacity: 1;\n            }\n          }\n          &.active-remove {\n            display: none;\n          }\n        }\n      </code>\n    </pre>\n  </div>\n\n  <h3>Options</h3>\n  <p>Options can be passed via data attributes or as an <a href="http://docs.angularjs.org/guide/expression">AngularJS expression</a> to evaluate as an object on\n    <code>bs-tabs</code>. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p>\n  <div class="table-responsive">\n    <table class="table table-bordered table-striped">\n      <thead>\n        <tr>\n          <th style="width: 100px;">Name</th>\n          <th style="width: 100px;">type</th>\n          <th style="width: 50px;">default</th>\n          <th>description</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>animation</td>\n          <td>string</td>\n          <td>am-fade</td>\n          <td>apply a CSS animation to the popover with <code>ngAnimate</code></td>\n        </tr>\n        <tr>\n          <td>template</td>\n          <td>path</td>\n          <td>false</td>\n          <td>\n            <p>If a remote URL is provided, overrides the default template</p>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  <div class="callout callout-info">\n    <h4>Default options</h4>\n    <p>You can override global defaults for the plugin with <code>$tabProvider.defaults</code></p>\n    <div class="highlight">\n      <pre class="bs-exemple-code">\n        <code class="javascript" highlight-block>\n          angular.module(\'myApp\')\n          .config(function($tabProvider) {\n            angular.extend($tabProvider.defaults, {\n              animation: \'am-flip-x\'\n            });\n          })\n        </code>\n      </pre>\n    </div>\n  </div>\n\n</div>\n'),a.put("timepicker/docs/timepicker.demo.html",'<div class="bs-docs-section" ng-controller="TimepickerDemoCtrl">\n\n  <div class="page-header">\n    <h1 id="timepickers">Timepickers <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/timepicker/timepicker.js" target="_blank">timepicker.js</a>\n    </h1>\n    <code>mgcrea.ngStrap.timepicker</code>\n  </div>\n\n\n  <h2 id="timepickers-examples">Examples</h2>\n  <p>Add quick, dynamic timepicker functionality with any form text input.</p>\n\n  <div class="callout callout-danger">\n    <h4>Plugin dependency</h4>\n    <p>Timepickers require the <a href="#tooltips">tooltip module</a> and <a href="//github.com/mgcrea/angular-strap/blob/master/src/helpers/date-parser.js" target="_blank">dateParser helper</a> module to be loaded.</p>\n  </div>\n\n  <div class="callout callout-info">\n    <h4>Support for locales</h4>\n    <p>This module leverages the <a href="http://docs.angularjs.org/api/ng.$locale">$locale</a> service. You just have to load the proper <a href="http://docs.angularjs.org/guide/i18n">i18n</a> file to seamlessly translate your timepickers.</p>\n  </div>\n\n  <h3>Live demo <a class="small edit-plunkr" data-module-name="mgcrea.ngStrapDocs" data-content-html-url="timepicker/docs/timepicker.demo.html" data-content-js-url="timepicker/docs/timepicker.demo.js" ng-plunkr data-title="edit in plunker" data-placement="right" bs-tooltip></a></h3>\n  <pre class="bs-example-scope">$scope.time = {{time}}; // (formatted: {{time | date:\'shortTime\'}})\n$scope.selectedTimeAsNumber = {{selectedTimeAsNumber}}; // (formatted: {{selectedTimeAsNumber | date:\'shortTime\'}})\n$scope.sharedDate = {{sharedDate}}; // (formatted: {{sharedDate | date:\'short\'}})\n  </pre>\n  <div class="bs-example" style="padding-bottom: 24px;" append-source>\n    <form name="timepickerForm" class="form-inline" role="form">\n\n      <!-- Basic example -->\n      <div class="form-group" ng-class="{\'has-error\': timepickerForm.time.$invalid}">\n        <label class="control-label"><i class="fa fa-clock-o"></i> Time <small>(as date)</small></label>\n        <input type="text" class="form-control" size="8" ng-model="time" name="time" bs-timepicker>\n      </div>\n\n      <!-- Custom example -->\n      <div class="form-group" ng-class="{\'has-error\': timepickerForm.time2.$invalid}">\n        <label class="control-label"><i class="fa fa-clock-o"></i> Time <small>(as number)</small></label>\n        <input type="text" class="form-control" size="5" ng-model="selectedTimeAsNumber" data-time-format="HH:mm" data-time-type="number" data-min-time="10:00" data-max-time="13:30" data-autoclose="1" name="time2" bs-timepicker>\n      </div>\n      <hr>\n\n      <!-- Datetime example -->\n      <div class="form-group">\n        <label class="control-label"><i class="fa fa-calendar"></i> Datetime picker</label><br>\n        <div class="form-group">\n          <input type="text" size="10" class="form-control" ng-model="sharedDate" data-autoclose="1" placeholder="Date" bs-datepicker>\n        </div>\n        <div class="form-group">\n          <input type="text" size="8" class="form-control" ng-model="sharedDate" data-autoclose="1" placeholder="Time" bs-timepicker>\n        </div>\n      </div>\n\n    </form>\n  </div>\n\n  <h2 id="timepickers-usage">Usage</h2>\n  <p>Append a <code>bs-timepicker</code>attribute to any element to enable the directive.</p>\n  <div class="callout callout-info">\n    <h4>The module exposes a <code>$timepicker</code>service</h4>\n    <p>Available for programmatic use (mainly in directives as it requires a DOM element).</p>\n    <div class="highlight">\n      <pre>\n        <code class="javascript" highlight-block>\n          var myTimepicker = $timepicker(element, ngModelController);\n        </code>\n      </pre>\n    </div>\n  </div>\n\n  <h3>Options</h3>\n  <p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p>\n  <div class="callout callout-info">\n    <h4>This module supports exotic placement options!</h4>\n    <p>You can position your select in corners (such as <code>bottom-left</code>) or any other combination two.</p>\n    <p>Exotic placement options are not part of the Bootstrap\'s core, to use them you must use <code>bootstrap-additions.css</code> from the <a href="//github.com/mgcrea/bootstrap-additions" target="_blank">BootstrapAdditions</a> project. This project being not yet fully released, meanwhile, you can use the <a href="//mgcrea.github.io/angular-strap/static/styles/bootstrap-additions.min.css" target="_blank">development snapshot</a> compiled for theses docs.</p>\n  </div>\n  <div class="table-responsive">\n    <table class="table table-bordered table-striped">\n      <thead>\n        <tr>\n          <th style="width: 100px;">Name</th>\n          <th style="width: 100px;">type</th>\n          <th style="width: 50px;">default</th>\n          <th>description</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>animation</td>\n          <td>string</td>\n          <td>am-fade</td>\n          <td>apply a CSS animation powered by <code>ngAnimate</code></td>\n        </tr>\n        <tr>\n          <td>placement</td>\n          <td>string</td>\n          <td>\'bottom-left\'</td>\n          <td>how to position the typeahead - top | bottom | left | right, or any combination like bottom-left.</td>\n        </tr>\n        <tr>\n          <td>trigger</td>\n          <td>string</td>\n          <td>\'focus\'</td>\n          <td>how typeahead is triggered - click | hover | focus | manual</td>\n        </tr>\n        <tr>\n          <td>html</td>\n          <td>boolean</td>\n          <td>false</td>\n          <td>replace <code>ng-bind</code> with <code>ng-bind-html</code>, requires <code>ngSanitize</code> to be loaded</td>\n        </tr>\n        <tr>\n          <td>delay</td>\n          <td>number | object</td>\n          <td>0</td>\n          <td>\n            <p>delay showing and hiding the typeahead (ms) - does not apply to manual trigger type</p>\n            <p>If a number is supplied, delay is applied to both hide/show</p>\n            <p>Object structure is:\n              <code>delay: { show: 500, hide: 100 }</code>\n            </p>\n          </td>\n        </tr>\n        <tr>\n          <td>container</td>\n          <td>string | false</td>\n          <td>false</td>\n          <td>\n            <p>Appends the typeahead to a specific element. Example:\n              <code>container: \'body\'</code>. This option is particularly useful in that it allows you to position the typeahead in the flow of the document near the triggering element -&nbsp;which will prevent the typeahead from floating away from the triggering element during a window resize.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>template</td>\n          <td>path | id</td>\n          <td>\'$typeahead\'</td>\n          <td>\n            <p>If provided, overrides the default template, can be either a remote URL or a cached template id.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>timeFormat</td>\n          <td>string</td>\n          <td>\'shortTime\'</td>\n          <td>\n            <p>Rendering format of your time, leverages <a href="http://docs.angularjs.org/api/ng.filter:date">ng.filter:date</a>.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>timeType</td>\n          <td>string</td>\n          <td>\'time\'</td>\n          <td>\n            <p>Expected model type of your time - date | number | iso | string</p>\n          </td>\n        </tr>\n        <tr>\n          <td>autoclose</td>\n          <td>boolean</td>\n          <td>false</td>\n          <td>\n            <p>Whether the picker should close itself upon select.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>minTime</td>\n          <td>date*</td>\n          <td>-Infinity</td>\n          <td>\n            <p>Minimum allowed time for selection <small>(parsed against current format)</small>. You can use the string "now" that will resolve the current time.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>maxTime</td>\n          <td>date*</td>\n          <td>+Infinity</td>\n          <td>\n            <p>Maximum allowed time for selection <small>(parsed against current format)</small>. You can use the string "now" that will resolve the current time.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>length</td>\n          <td>number</td>\n          <td>5</td>\n          <td>\n            <p>Length of the timepicker (should be an odd number).</p>\n          </td>\n        </tr>\n        <tr>\n          <td>hourStep</td>\n          <td>number</td>\n          <td>1</td>\n          <td>\n            <p>Default step for hours.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>minuteStep</td>\n          <td>number</td>\n          <td>5</td>\n          <td>\n            <p>Default step for minutes.</p>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  <div class="callout callout-info">\n    <h4>Default options</h4>\n    <p>You can override global defaults for the plugin with <code>$timepickerProvider.defaults</code></p>\n    <div class="highlight">\n      <pre class="bs-exemple-code">\n        <code class="javascript" highlight-block>\n          angular.module(\'myApp\')\n          .config(function($timepickerProvider) {\n            angular.extend($timepickerProvider.defaults, {\n              timeFormat: \'HH:mm\',\n              length: 7\n            });\n          })\n        </code>\n      </pre>\n    </div>\n  </div>\n\n</div>\n'),a.put("tooltip/docs/tooltip.demo.html",'<div class="bs-docs-section" ng-controller="TooltipDemoCtrl">\n\n  <div class="page-header">\n    <h1 id="tooltips">Tooltips <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/tooltip/tooltip.js" target="_blank">tooltip.js</a>\n    </h1>\n    <code>mgcrea.ngStrap.tooltip</code>\n  </div>\n\n\n  <h2 id="tooltips-examples">Examples</h2>\n  <p>Add small overlays of content on hover, to any element for housing secondary information.</p>\n\n  <div class="callout callout-warning">\n    <h4>Plugin dependency</h4>\n    <p>Tooltip require the <a href="//github.com/mgcrea/angular-strap/blob/master/src/helpers/dimensions.js" target="_blank">helpers.dimensions</a> module to be loaded.</p>\n  </div>\n\n  <h3>Live demo <a class="small edit-plunkr" data-module-name="mgcrea.ngStrapDocs" data-content-html-url="tooltip/docs/tooltip.demo.html" data-content-js-url="tooltip/docs/tooltip.demo.js" ng-plunkr data-title="edit in plunker" data-placement="right" bs-tooltip>clog.info</a></h3>\n  <div class="form-group hide">\n    <label>Title</label>\n    <input type="text" class="form-control" ng-model="tooltip.title" placeholder="Title">\n  </div>\n  <pre class="bs-example-scope">$scope.tooltip = {{tooltip | json}};</pre>\n  <div class="bs-example" style="padding-bottom: 24px;" append-source>\n\n    <!-- Markup for a default tooltip with a scope passed as an object {title:\'\'} -->\n    <p>Tight pants next level keffiyeh <a href="" data-animation="am-flip-x" bs-tooltip="tooltip">you probably</a> haven\'t heard of them. Photo booth beard raw denim letterpress vegan messenger bag stumptown.</p>\n\n    <div class="input-group col-xs-5">\n      <span class="input-group-btn">\n        <!-- You can also use data-attrs to assign scope variables -->\n        <button class="btn btn-primary" type="button" data-trigger="click" data-type="success" title="{{tooltip.title}}" bs-tooltip>Click me</button>\n      </span>\n      <input type="text" class="form-control" data-placement="right" data-type="info" data-container="body" placeholder="Focus to toggle tooltip" data-trigger="focus" bs-tooltip="tooltip">\n    </div>\n    <div class="checkbox">\n      <label data-placement="bottom" data-type="info" data-animation="am-fade-and-scale" bs-tooltip="tooltip">\n        <input type="checkbox" ng-model="tooltip.checked"> Remember me\n      </label>\n    </div>\n\n  </div>\n\n  <h2 id="tooltips-usage">Usage</h2>\n  <p>Append a <code>bs-tooltip</code> attribute to any element to enable the directive.</p>\n  <div class="callout callout-info">\n    <h4>The module exposes a <code>$tooltip</code>service</h4>\n    <p>Available for programmatic use (mainly in directives as it requires a DOM element).</p>\n    <div class="highlight">\n      <pre>\n        <code class="javascript" highlight-block>\n          var myTooltip = $tooltip(element, {title: \'My Title\'});\n        </code>\n      </pre>\n    </div>\n  </div>\n\n  <h3>Options</h3>\n  <p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p>\n  <p>For directives, you can naturally inherit the contextual <code>$scope</code> or leverage a custom one with an <a href="http://docs.angularjs.org/guide/expression">AngularJS expression</a> to evaluate as an object directly on the <code>bs-tooltip</code> attribute</p>\n  <div class="callout callout-info">\n    <h4>This module supports exotic placement options!</h4>\n    <p>You can position your popover in corners (such as <code>bottom-left</code>) or any other combination two.</p>\n    <p>Exotic placement options are not part of the Bootstrap\'s core, to use them you must use <code>bootstrap-additions.css</code> from the <a href="//github.com/mgcrea/bootstrap-additions" target="_blank">BootstrapAdditions</a> project. This project being not yet fully released, meanwhile, you can use the <a href="//mgcrea.github.io/angular-strap/static/styles/bootstrap-additions.min.css" target="_blank">development snapshot</a> compiled for theses docs.</p>\n  </div>\n  <div class="table-responsive">\n    <table class="table table-bordered table-striped">\n      <thead>\n        <tr>\n          <th style="width: 100px;">Name</th>\n          <th style="width: 100px;">type</th>\n          <th style="width: 50px;">default</th>\n          <th>description</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>animation</td>\n          <td>string</td>\n          <td>am-fade</td>\n          <td>apply a CSS animation powered by <code>ngAnimate</code></td>\n        </tr>\n        <tr>\n          <td>placement</td>\n          <td>string</td>\n          <td>\'right\'</td>\n          <td>how to position the tooltip - top | bottom | left | right, or any combination like bottom-left.</td>\n        </tr>\n        <tr>\n          <td>trigger</td>\n          <td>string</td>\n          <td>\'click\'</td>\n          <td>how tooltip is triggered - click | hover | focus | manual</td>\n        </tr>\n        <tr>\n          <td>title</td>\n          <td>string</td>\n          <td>\'\'</td>\n          <td>default title value if <code>title</code>attribute isn\'t present</td>\n        </tr>\n        <tr>\n          <td>html</td>\n          <td>boolean</td>\n          <td>false</td>\n          <td>replace <code>ng-bind</code> with <code>ng-bind-html</code>, requires <code>ngSanitize</code> to be loaded</td>\n        </tr>\n        <tr>\n          <td>delay</td>\n          <td>number | object</td>\n          <td>0</td>\n          <td>\n            <p>delay showing and hiding the tooltip (ms) - does not apply to manual trigger type</p>\n            <p>If a number is supplied, delay is applied to both hide/show</p>\n            <p>Object structure is:\n              <code>delay: { show: 500, hide: 100 }</code>\n            </p>\n          </td>\n        </tr>\n        <tr>\n          <td>container</td>\n          <td>string | false</td>\n          <td>false</td>\n          <td>\n            <p>Appends the tooltip to a specific element. Example:\n              <code>container: \'body\'</code>. This option is particularly useful in that it allows you to position the tooltip in the flow of the document near the triggering element -&nbsp;which will prevent the tooltip from floating away from the triggering element during a window resize.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>template</td>\n          <td>path</td>\n          <td>false</td>\n          <td>\n            <p>If provided, overrides the default template, can be either a remote URL or a cached template id.</p>\n            <p>It should be a <code>div.tooltip</code> element following Twitter Bootstrap styles conventions (<a href="//github.com/mgcrea/angular-strap/blob/master/src/tooltip/tooltip.tpl.html" target="_blank">like this</a>).</p>\n          </td>\n        </tr>\n        <tr>\n          <td>contentTemplate</td>\n          <td>path</td>\n          <td>false</td>\n          <td>\n            <p>If provided, fetches the partial and includes it as the inner content, can be either a remote URL or a cached template id.</p>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  <div class="callout callout-info">\n    <h4>Default options</h4>\n    <p>You can override global defaults for the plugin with <code>$tooltipProvider.defaults</code></p>\n    <div class="highlight">\n      <pre class="bs-exemple-code">\n        <code class="javascript" highlight-block>\n          angular.module(\'myApp\')\n          .config(function($tooltipProvider) {\n            angular.extend($tooltipProvider.defaults, {\n              animation: \'am-flip-x\',\n              trigger: \'hover\'\n            });\n          })\n        </code>\n      </pre>\n    </div>\n  </div>\n\n  <h3>Scope methods</h3>\n  <p>Methods available inside the directive scope to toggle visibility.</p>\n\n  <h4>$show()</h4>\n  <p>Reveals the tooltip.</p>\n\n  <h4>$hide()</h4>\n  <p>Hides the tooltip.</p>\n\n  <h4>$toggle()</h4>\n  <p>Toggles the tooltip.</p>\n\n</div>\n'),a.put("tooltip/docs/tooltip.tpl.demo.html",'<div class="tooltip tooltip-info" ng-show="title">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind-html="title"></div>\n</div>\n'),a.put("typeahead/docs/typeahead.demo.html",'<div class="bs-docs-section" ng-controller="TypeaheadDemoCtrl">\n\n  <div class="page-header">\n    <h1 id="typeaheads">Typeaheads <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/typeahead/typeahead.js" target="_blank">typeahead.js</a>\n    </h1>\n    <code>mgcrea.ngStrap.typeahead</code>\n  </div>\n\n\n  <h2 id="typeaheads-examples">Examples</h2>\n  <p>Add quick, dynamic typeahead functionality with any form text input.</p>\n\n  <div class="callout callout-danger">\n    <h4>Plugin dependency</h4>\n    <p>Selects require the <a href="#tooltips">tooltip module</a> and <a href="//github.com/mgcrea/angular-strap/blob/master/src/helpers/parse-options.js" target="_blank">parseOptions helper</a> module to be loaded.</p>\n  </div>\n\n  <h3>Live demo <a class="small edit-plunkr" data-module-name="mgcrea.ngStrapDocs" data-content-html-url="typeahead/docs/typeahead.demo.html" data-content-js-url="typeahead/docs/typeahead.demo.js" ng-plunkr data-title="edit in plunker" data-placement="right" bs-tooltip></a></h3>\n  <pre class="bs-example-scope">$scope.selectedState = "{{selectedState}}";\n$scope.states = {{states}};\n\n$scope.selectedIcon = "{{selectedIcon}}";\n$scope.icons = "{{icons}}";\n\n$scope.selectedAddress = "{{selectedAddress}}";\n</pre>\n  <div class="bs-example" style="padding-bottom: 24px;" append-source>\n    <form class="form-inline" role="form">\n      <div class="form-group">\n        <label><i class="fa fa-globe"></i> State</label>\n        <input type="text" class="form-control" ng-model="selectedState" ng-options="state for state in states" placeholder="Enter state" bs-typeahead>\n      </div>\n      <div class="form-group">\n        <label>Icon</label>\n        <input type="text" class="form-control" ng-model="selectedIcon" data-min-length="0" data-html="1" data-animation="am-flip-x" ng-options="icon.value as icon.label for icon in icons" placeholder="Enter icon" bs-typeahead>\n      </div>\n      <hr>\n      <!-- Using an async data provider -->\n      <div class="form-group">\n        <label><i class="fa fa-home"></i> Address <small>(async via maps.googleapis.com)</small></label>\n        <input type="text" class="form-control" ng-model="selectedAddress" data-animation="am-flip-x" ng-options="address.formatted_address as address.formatted_address for address in getAddress($viewValue)" placeholder="Enter address" bs-typeahead>\n      </div>\n    </form>\n  </div>\n\n\n  <h2 id="typeaheads-usage">Usage</h2>\n  <p>Append a <code>bs-typeahead</code>attribute to any element to enable the directive.</p>\n  <div class="callout callout-info">\n    <h4>The module exposes a <code>$typeahead</code>service</h4>\n    <p>Available for programmatic use (mainly in directives as it requires a DOM element).</p>\n    <div class="highlight">\n      <pre>\n        <code class="javascript" highlight-block>\n          var myTypeahead = $typeahead(element, {controller: someModelController});\n        </code>\n      </pre>\n    </div>\n  </div>\n\n  <h3>Options</h3>\n  <p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p>\n  <div class="callout callout-info">\n    <h4>This module supports exotic placement options!</h4>\n    <p>You can position your typeahead in corners (such as <code>bottom-left</code>) or any other combination two.</p>\n    <p>Exotic placement options are not part of the Bootstrap\'s core, to use them you must use <code>bootstrap-additions.css</code> from the <a href="//github.com/mgcrea/bootstrap-additions" target="_blank">BootstrapAdditions</a> project. This project being not yet fully released, meanwhile, you can use the <a href="//mgcrea.github.io/angular-strap/static/styles/bootstrap-additions.min.css" target="_blank">development snapshot</a> compiled for theses docs.</p>\n  </div>\n  <div class="table-responsive">\n    <table class="table table-bordered table-striped">\n      <thead>\n        <tr>\n          <th style="width: 100px;">Name</th>\n          <th style="width: 100px;">type</th>\n          <th style="width: 50px;">default</th>\n          <th>description</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>animation</td>\n          <td>string</td>\n          <td>am-fade</td>\n          <td>apply a CSS animation powered by <code>ngAnimate</code></td>\n        </tr>\n        <tr>\n          <td>placement</td>\n          <td>string</td>\n          <td>\'bottom-left\'</td>\n          <td>how to position the typeahead - top | bottom | left | right, or any combination like bottom-left.</td>\n        </tr>\n        <tr>\n          <td>trigger</td>\n          <td>string</td>\n          <td>\'focus\'</td>\n          <td>how typeahead is triggered - click | hover | focus | manual</td>\n        </tr>\n        <tr>\n          <td>html</td>\n          <td>boolean</td>\n          <td>false</td>\n          <td>replace <code>ng-bind</code> with <code>ng-bind-html</code>, requires <code>ngSanitize</code> to be loaded</td>\n        </tr>\n        <tr>\n          <td>delay</td>\n          <td>number | object</td>\n          <td>0</td>\n          <td>\n            <p>delay showing and hiding the typeahead (ms) - does not apply to manual trigger type</p>\n            <p>If a number is supplied, delay is applied to both hide/show</p>\n            <p>Object structure is:\n              <code>delay: { show: 500, hide: 100 }</code>\n            </p>\n          </td>\n        </tr>\n        <tr>\n          <td>container</td>\n          <td>string | false</td>\n          <td>false</td>\n          <td>\n            <p>Appends the typeahead to a specific element. Example:\n              <code>container: \'body\'</code>. This option is particularly useful in that it allows you to position the typeahead in the flow of the document near the triggering element -&nbsp;which will prevent the typeahead from floating away from the triggering element during a window resize.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>template</td>\n          <td>path | id</td>\n          <td>\'$typeahead\'</td>\n          <td>\n            <p>If provided, overrides the default template, can be either a remote URL or a cached template id.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>limit</td>\n          <td>number</td>\n          <td>6</td>\n          <td>\n            <p>The max number of items to display in the dropdown.</p>\n          </td>\n        </tr>\n        <tr>\n          <td>minLength</td>\n          <td>number</td>\n          <td>1</td>\n          <td>\n            <p>The minimum character length needed before triggering autocomplete suggestions.</p>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  <div class="callout callout-info">\n    <h4>Default options</h4>\n    <p>You can override global defaults for the plugin with <code>$typeaheadProvider.defaults</code></p>\n    <div class="highlight">\n      <pre class="bs-exemple-code">\n        <code class="javascript" highlight-block>\n          angular.module(\'myApp\')\n          .config(function($typeaheadProvider) {\n            angular.extend($typeaheadProvider.defaults, {\n              animation: \'am-flip-x\',\n              minLength: 2,\n              limit: 8\n            });\n          })\n        </code>\n      </pre>\n    </div>\n  </div>\n\n</div>\n'),a.put("typeahead/docs/typeahead.tpl.demo.html","<pre>{{pane.content}}</pre>\n")
}]),angular.module("mgcrea.ngStrapDocs").run(["$templateCache",function(a){"use strict";a.put("views/aside.html",'<div class="aside bs-docs-aside" tabindex="-1" role="dialog">\n  <div class="aside-dialog">\n    <div class="aside-content">\n      <div class="aside-header" ng-show="title">\n        <button type="button" class="close" ng-click="$hide()">&times;</button>\n        <h4 class="aside-title" ng-bind-html="title"></h4>\n      </div>\n      <div class="aside-body bs-sidebar" style="float:right;" ng-click="$hide();">\n        <div ng-include="\'views/sidebar.html\'"></div>\n      </div>\n<!--       <div class="aside-footer">\n      </div> -->\n    </div>\n  </div>\n</div>\n'),a.put("views/sidebar.html",'  <ul class="nav bs-sidenav">\n<!--     <li>\n      <a href="#js-overview">Overview</a>\n      <ul class="nav">\n        <li><a href="#js-individual-compiled">Individual or compiled</a>\n        </li>\n        <li><a href="#js-data-attrs">Data attributes</a>\n        </li>\n        <li><a href="#js-programmatic-api">Programmatic API</a>\n        </li>\n        <li><a href="#js-noconflict">No conflict</a>\n        </li>\n        <li><a href="#js-events">Events</a>\n        </li>\n      </ul>\n    </li>\n    <li><a href="#transitions">Transitions</a>\n    </li> -->\n    <li>\n      <a href="#getting-started">Getting started</a>\n<!--       <ul class="nav">\n        <li><a href="#modals-examples">Examples</a></li>\n        <li><a href="#modals-usage">Usage</a></li>\n      </ul> -->\n    </li>\n    <hr style="margin: 2px 0;">\n    <li>\n      <a href="#modals">Modal</a>\n      <ul class="nav">\n        <li><a href="#modals-examples">Examples</a></li>\n        <li><a href="#modals-usage">Usage</a></li>\n      </ul>\n    </li>\n    <li>\n      <a href="#asides">Aside</a>\n      <ul class="nav">\n        <li><a href="#asides-examples">Examples</a></li>\n        <li><a href="#asides-usage">Usage</a></li>\n      </ul>\n    </li>\n    <li>\n      <a href="#alerts">Alert</a>\n      <ul class="nav">\n        <li><a href="#alerts-examples">Examples</a>\n        </li>\n        <li><a href="#alerts-usage">Usage</a>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <a href="#buttons">Button</a>\n      <ul class="nav">\n        <li><a href="#buttons-examples">Examples</a>\n        </li>\n        <li><a href="#buttons-usage">Usage</a>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <a href="#selects">Select</a>\n      <ul class="nav">\n        <li><a href="#selects-examples">Examples</a>\n        </li>\n        <li><a href="#selects-usage">Usage</a>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <a href="#datepickers">Datepicker</a>\n      <ul class="nav">\n        <li><a href="#datepickers-examples">Examples</a>\n        </li>\n        <li><a href="#datepickers-usage">Usage</a>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <a href="#timepickers">Timepicker</a>\n      <ul class="nav">\n        <li><a href="#timepickers-examples">Examples</a>\n        </li>\n        <li><a href="#timepickers-usage">Usage</a>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <a href="#navbars">Navbar</a>\n      <ul class="nav">\n        <li><a href="#navbars-examples">Examples</a>\n        </li>\n        <li><a href="#navbars-usage">Usage</a>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <a href="#tooltips">Tooltip</a>\n      <ul class="nav">\n        <li><a href="#tooltips-examples">Examples</a></li>\n        <li><a href="#tooltips-usage">Usage</a></li>\n      </ul>\n    </li>\n    <li>\n      <a href="#popovers">Popover</a>\n      <ul class="nav">\n        <li><a href="#popovers-examples">Examples</a>\n        </li>\n        <li><a href="#popovers-usage">Usage</a>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <a href="#dropdowns">Dropdown</a>\n      <ul class="nav">\n        <li><a href="#dropdowns-examples">Examples</a>\n        </li>\n        <li><a href="#dropdowns-usage">Usage</a>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <a href="#typeaheads">Typeahead</a>\n      <ul class="nav">\n        <li><a href="#typeaheads-examples">Examples</a>\n        </li>\n        <li><a href="#typeaheads-usage">Usage</a>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <a href="#scrollspy">Scrollspy</a>\n      <ul class="nav">\n        <li><a href="#scrollspy-examples">Examples</a>\n        </li>\n        <li><a href="#scrollspy-usage">Usage</a>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <a href="#affix">Affix</a>\n      <ul class="nav">\n        <li><a href="#affix-examples">Examples</a>\n        </li>\n        <li><a href="#affix-usage">Usage</a>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <a href="#tabs">Tab</a>\n      <ul class="nav">\n        <li><a href="#tabs-examples">Examples</a>\n        </li>\n        <li><a href="#tabs-usage">Usage</a>\n        </li>\n      </ul>\n    </li>\n<!--\n    <li>\n      <a href="#collapse">Collapse</a>\n      <ul class="nav">\n        <li><a href="#collapse-examples">Examples</a>\n        </li>\n        <li><a href="#collapse-usage">Usage</a>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <a href="#carousel">Carousel</a>\n      <ul class="nav">\n        <li><a href="#carousel-examples">Examples</a>\n        </li>\n        <li><a href="#carousel-usage">Usage</a>\n        </li>\n      </ul>\n    </li> -->\n\n  </ul>\n')}]);